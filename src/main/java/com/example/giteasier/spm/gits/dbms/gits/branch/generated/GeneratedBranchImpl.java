package com.example.giteasier.spm.gits.dbms.gits.branch.generated;

import com.example.giteasier.spm.gits.dbms.gits.branch.Branch;
import com.example.giteasier.spm.gits.dbms.gits.repository.Repository;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.time.LocalDateTime;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.example.giteasier.spm.gits.dbms.gits.branch.Branch}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBranchImpl implements Branch {
    
    private long id;
    private long projectId;
    private String name;
    private String chash;
    private String tag;
    private String message;
    private LocalDateTime creationTime;
    private LocalDateTime updateTime;
    private boolean deleted;
    private String base;
    private LocalDateTime baseline;
    
    protected GeneratedBranchImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public long getProjectId() {
        return projectId;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public String getChash() {
        return chash;
    }
    
    @Override
    public String getTag() {
        return tag;
    }
    
    @Override
    public String getMessage() {
        return message;
    }
    
    @Override
    public LocalDateTime getCreationTime() {
        return creationTime;
    }
    
    @Override
    public LocalDateTime getUpdateTime() {
        return updateTime;
    }
    
    @Override
    public boolean getDeleted() {
        return deleted;
    }
    
    @Override
    public String getBase() {
        return base;
    }
    
    @Override
    public LocalDateTime getBaseline() {
        return baseline;
    }
    
    @Override
    public Branch setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Branch setProjectId(long projectId) {
        this.projectId = projectId;
        return this;
    }
    
    @Override
    public Branch setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Branch setChash(String chash) {
        this.chash = chash;
        return this;
    }
    
    @Override
    public Branch setTag(String tag) {
        this.tag = tag;
        return this;
    }
    
    @Override
    public Branch setMessage(String message) {
        this.message = message;
        return this;
    }
    
    @Override
    public Branch setCreationTime(LocalDateTime creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    @Override
    public Branch setUpdateTime(LocalDateTime updateTime) {
        this.updateTime = updateTime;
        return this;
    }
    
    @Override
    public Branch setDeleted(boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    @Override
    public Branch setBase(String base) {
        this.base = base;
        return this;
    }
    
    @Override
    public Branch setBaseline(LocalDateTime baseline) {
        this.baseline = baseline;
        return this;
    }
    
    @Override
    public Repository findProjectId(Manager<Repository> foreignManager) {
        return foreignManager.stream().filter(Repository.ID.equal(getProjectId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "           + Objects.toString(getId()));
        sj.add("projectId = "    + Objects.toString(getProjectId()));
        sj.add("name = "         + Objects.toString(getName()));
        sj.add("chash = "        + Objects.toString(getChash()));
        sj.add("tag = "          + Objects.toString(getTag()));
        sj.add("message = "      + Objects.toString(getMessage()));
        sj.add("creationTime = " + Objects.toString(getCreationTime()));
        sj.add("updateTime = "   + Objects.toString(getUpdateTime()));
        sj.add("deleted = "      + Objects.toString(getDeleted()));
        sj.add("base = "         + Objects.toString(getBase()));
        sj.add("baseline = "     + Objects.toString(getBaseline()));
        return "BranchImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Branch)) { return false; }
        final Branch thatBranch = (Branch)that;
        if (this.getId() != thatBranch.getId()) { return false; }
        if (this.getProjectId() != thatBranch.getProjectId()) { return false; }
        if (!Objects.equals(this.getName(), thatBranch.getName())) { return false; }
        if (!Objects.equals(this.getChash(), thatBranch.getChash())) { return false; }
        if (!Objects.equals(this.getTag(), thatBranch.getTag())) { return false; }
        if (!Objects.equals(this.getMessage(), thatBranch.getMessage())) { return false; }
        if (!Objects.equals(this.getCreationTime(), thatBranch.getCreationTime())) { return false; }
        if (!Objects.equals(this.getUpdateTime(), thatBranch.getUpdateTime())) { return false; }
        if (this.getDeleted() != thatBranch.getDeleted()) { return false; }
        if (!Objects.equals(this.getBase(), thatBranch.getBase())) { return false; }
        if (!Objects.equals(this.getBaseline(), thatBranch.getBaseline())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Long.hashCode(getProjectId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getChash());
        hash = 31 * hash + Objects.hashCode(getTag());
        hash = 31 * hash + Objects.hashCode(getMessage());
        hash = 31 * hash + Objects.hashCode(getCreationTime());
        hash = 31 * hash + Objects.hashCode(getUpdateTime());
        hash = 31 * hash + Boolean.hashCode(getDeleted());
        hash = 31 * hash + Objects.hashCode(getBase());
        hash = 31 * hash + Objects.hashCode(getBaseline());
        return hash;
    }
}